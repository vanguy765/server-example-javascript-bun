// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./generated.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const accessPhonesRowSchema = z.object({
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  number: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const accessPhonesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  number: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const accessPhonesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  number: z.string().optional(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const accessPhonesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("access_phones_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const agentsRowSchema = z.object({
  created_at: z.string().nullable(),
  department: z.string().nullable(),
  email: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  phone_number: z.string().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const agentsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  phone_number: z.string().optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const agentsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  phone_number: z.string().optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const agentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("agents_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("agents_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const apiKeysRowSchema = z.object({
  created_at: z.string().nullable(),
  expires_at: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  key: z.string(),
  name: z.string(),
  permissions: jsonSchema.nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const apiKeysInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  key: z.string(),
  name: z.string(),
  permissions: jsonSchema.optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const apiKeysUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  key: z.string().optional(),
  name: z.string().optional(),
  permissions: jsonSchema.optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const apiKeysRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("api_keys_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const auditLogsRowSchema = z.object({
  action: z.string(),
  changed_at: z.string().nullable(),
  changed_by: z.string().nullable(),
  id: z.string(),
  new_data: jsonSchema.nullable(),
  old_data: jsonSchema.nullable(),
  table_name: z.string(),
});

export const auditLogsInsertSchema = z.object({
  action: z.string(),
  changed_at: z.string().optional().nullable(),
  changed_by: z.string().optional().nullable(),
  id: z.string().optional(),
  new_data: jsonSchema.optional().nullable(),
  old_data: jsonSchema.optional().nullable(),
  table_name: z.string(),
});

export const auditLogsUpdateSchema = z.object({
  action: z.string().optional(),
  changed_at: z.string().optional().nullable(),
  changed_by: z.string().optional().nullable(),
  id: z.string().optional(),
  new_data: jsonSchema.optional().nullable(),
  old_data: jsonSchema.optional().nullable(),
  table_name: z.string().optional(),
});

export const auditLogsRelationshipsSchema = z.tuple([]);

export const interactionOutcomeSchema = z.union([
  z.literal("successful"),
  z.literal("unsuccessful"),
  z.literal("pending"),
  z.literal("scheduled"),
  z.literal("cancelled"),
  z.literal("follow_up"),
  z.literal("no_answer"),
  z.literal("busy"),
  z.literal("callback_requested"),
  z.literal("handoff"),
  z.literal("timed_out"),
  z.literal("ordered"),
]);

export const interactionPurposeSchema = z.union([
  z.literal("sales"),
  z.literal("support"),
  z.literal("inquiry"),
  z.literal("complaint"),
  z.literal("feedback"),
  z.literal("survey"),
  z.literal("appointment"),
  z.literal("billing"),
  z.literal("other"),
]);

export const interactionStatusSchema = z.union([
  z.literal("scheduled"),
  z.literal("completed"),
  z.literal("canceled"),
  z.literal("missed"),
  z.literal("rescheduled"),
  z.literal("in_progress"),
  z.literal("priority"),
]);

export const callLogsInsertSchema = z.object({
  agent_id: z.string().optional().nullable(),
  call_date: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  customer_id: z.string().optional().nullable(),
  duration: z.number().optional().nullable(),
  follow_up_date: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  outcome: interactionOutcomeSchema.optional().nullable(),
  purpose: interactionPurposeSchema.optional().nullable(),
  reorder_id: z.string().optional().nullable(),
  status: interactionStatusSchema.optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const callLogsUpdateSchema = z.object({
  agent_id: z.string().optional().nullable(),
  call_date: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  customer_id: z.string().optional().nullable(),
  duration: z.number().optional().nullable(),
  follow_up_date: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  outcome: interactionOutcomeSchema.optional().nullable(),
  purpose: interactionPurposeSchema.optional().nullable(),
  reorder_id: z.string().optional().nullable(),
  status: interactionStatusSchema.optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const callLogsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("call_logs_agent_id_fkey"),
    columns: z.tuple([z.literal("agent_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("agents"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("call_logs_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("customers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("call_logs_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_call_logs_reorder"),
    columns: z.tuple([z.literal("reorder_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("orders"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const contactMethodSchema = z.union([
  z.literal("email"),
  z.literal("phone"),
  z.literal("sms"),
  z.literal("mail"),
  z.literal("chat"),
  z.literal("in_person"),
  z.literal("social_media"),
  z.literal("none"),
]);

export const customerPreferencesInsertSchema = z.object({
  business: jsonSchema.optional().nullable(),
  contact_by_enum: contactMethodSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  customer_id: z.string(),
  favorites: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  orders: jsonSchema.optional().nullable(),
  personal: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const customerPreferencesUpdateSchema = z.object({
  business: jsonSchema.optional().nullable(),
  contact_by_enum: contactMethodSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  customer_id: z.string().optional(),
  favorites: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  orders: jsonSchema.optional().nullable(),
  personal: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const customerPreferencesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("customer_preferences_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("customers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const customersRowSchema = z.object({
  address: z.string().nullable(),
  city: z.string().nullable(),
  company: z.string().nullable(),
  country: z.string().nullable(),
  created_at: z.string().nullable(),
  email: z.string().nullable(),
  first_name: z.string(),
  id: z.string(),
  industry_id: z.string().nullable(),
  is_active: z.boolean().nullable(),
  last_name: z.string(),
  phone: z.string().nullable(),
  postal_code: z.string().nullable(),
  state: z.string().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const customersInsertSchema = z.object({
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  first_name: z.string(),
  id: z.string().optional(),
  industry_id: z.string().optional().nullable(),
  is_active: z.boolean().optional().nullable(),
  last_name: z.string(),
  phone: z.string().optional().nullable(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const customersUpdateSchema = z.object({
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  first_name: z.string().optional(),
  id: z.string().optional(),
  industry_id: z.string().optional().nullable(),
  is_active: z.boolean().optional().nullable(),
  last_name: z.string().optional(),
  phone: z.string().optional().nullable(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const customersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("customers_industry_id_fkey"),
    columns: z.tuple([z.literal("industry_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("industries"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("customers_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("customers_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const industriesRowSchema = z.object({
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  updated_at: z.string().nullable(),
});

export const industriesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const industriesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const industriesRelationshipsSchema = z.tuple([]);

export const ipAllowlistRowSchema = z.object({
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  ip_address: z.unknown(),
  is_active: z.boolean().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const ipAllowlistInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  ip_address: z.unknown(),
  is_active: z.boolean().optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const ipAllowlistUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  ip_address: z.unknown().optional(),
  is_active: z.boolean().optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const ipAllowlistRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("ip_allowlist_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const orderItemsRowSchema = z.object({
  created_at: z.string().nullable(),
  discount: z.number().nullable(),
  id: z.string(),
  order_id: z.string(),
  price: z.number(),
  product_id: z.string().nullable(),
  quantity: z.number(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const orderItemsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  discount: z.number().optional().nullable(),
  id: z.string().optional(),
  order_id: z.string(),
  price: z.number(),
  product_id: z.string().optional().nullable(),
  quantity: z.number(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const orderItemsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  discount: z.number().optional().nullable(),
  id: z.string().optional(),
  order_id: z.string().optional(),
  price: z.number().optional(),
  product_id: z.string().optional().nullable(),
  quantity: z.number().optional(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const orderItemsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("order_items_order_id_fkey"),
    columns: z.tuple([z.literal("order_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("orders"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("order_items_product_id_fkey"),
    columns: z.tuple([z.literal("product_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("order_items_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const ordersRowSchema = z.object({
  created_at: z.string().nullable(),
  customer_id: z.string().nullable(),
  id: z.string(),
  notes: z.string().nullable(),
  order_date: z.string().nullable(),
  status: z.string(),
  tenant_id: z.string(),
  total_amount: z.number().nullable(),
  updated_at: z.string().nullable(),
});

export const ordersInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  customer_id: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  order_date: z.string().optional().nullable(),
  status: z.string(),
  tenant_id: z.string(),
  total_amount: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const ordersUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  customer_id: z.string().optional().nullable(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  order_date: z.string().optional().nullable(),
  status: z.string().optional(),
  tenant_id: z.string().optional(),
  total_amount: z.number().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const ordersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("orders_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("customers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("orders_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const productCategoriesRowSchema = z.object({
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const productCategoriesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const productCategoriesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const productCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("product_categories_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const productSpecialsRowSchema = z.object({
  created_at: z.string().nullable(),
  discount: z.number().nullable(),
  end_date: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  product_id: z.string(),
  start_date: z.string().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const productSpecialsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  discount: z.number().optional().nullable(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  product_id: z.string(),
  start_date: z.string().optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const productSpecialsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  discount: z.number().optional().nullable(),
  end_date: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  product_id: z.string().optional(),
  start_date: z.string().optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const productSpecialsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("product_specials_product_id_fkey"),
    columns: z.tuple([z.literal("product_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("product_specials_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const productTypesRowSchema = z.object({
  category_id: z.string().nullable(),
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const productTypesInsertSchema = z.object({
  category_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const productTypesUpdateSchema = z.object({
  category_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const productTypesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("product_types_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("product_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("product_types_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const productsRowSchema = z.object({
  category_id: z.string().nullable(),
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  price: z.number().nullable(),
  product_type_id: z.string().nullable(),
  size: z.string().nullable(),
  sku: z.string().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const productsInsertSchema = z.object({
  category_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  price: z.number().optional().nullable(),
  product_type_id: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  sku: z.string().optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const productsUpdateSchema = z.object({
  category_id: z.string().optional().nullable(),
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  price: z.number().optional().nullable(),
  product_type_id: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  sku: z.string().optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const productsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("products_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("product_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("products_product_type_id_fkey"),
    columns: z.tuple([z.literal("product_type_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("product_types"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("products_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const proposedOrdersRowSchema = z.object({
  call_id: z.string(),
  created_at: z.string(),
  customer_id: z.string(),
  id: z.string(),
  last_device_id: z.string().nullable(),
  last_updated_by: z.string().nullable(),
  order_items: jsonSchema,
  proposed_date: z.string(),
  status: z.string(),
  tenant_id: z.string(),
  total: z.number(),
  updated_at: z.string().nullable(),
});

export const proposedOrdersInsertSchema = z.object({
  call_id: z.string(),
  created_at: z.string().optional(),
  customer_id: z.string(),
  id: z.string().optional(),
  last_device_id: z.string().optional().nullable(),
  last_updated_by: z.string().optional().nullable(),
  order_items: jsonSchema.optional(),
  proposed_date: z.string().optional(),
  status: z.string().optional(),
  tenant_id: z.string(),
  total: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const proposedOrdersUpdateSchema = z.object({
  call_id: z.string().optional(),
  created_at: z.string().optional(),
  customer_id: z.string().optional(),
  id: z.string().optional(),
  last_device_id: z.string().optional().nullable(),
  last_updated_by: z.string().optional().nullable(),
  order_items: jsonSchema.optional(),
  proposed_date: z.string().optional(),
  status: z.string().optional(),
  tenant_id: z.string().optional(),
  total: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const proposedOrdersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("fk_proposed_orders_customer"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("customers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("fk_proposed_orders_tenant"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const rolesRowSchema = z.object({
  created_at: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  permissions: jsonSchema.nullable(),
  updated_at: z.string().nullable(),
});

export const rolesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  permissions: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const rolesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  permissions: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const rolesRelationshipsSchema = z.tuple([]);

export const tenantsRowSchema = z.object({
  created_at: z.string().nullable(),
  domain: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  name: z.string(),
  settings: jsonSchema.nullable(),
  updated_at: z.string().nullable(),
});

export const tenantsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string(),
  settings: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const tenantsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  name: z.string().optional(),
  settings: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const tenantsRelationshipsSchema = z.tuple([]);

export const userPreferencesRowSchema = z.object({
  business: jsonSchema.nullable(),
  contact_by_enum: contactMethodSchema.nullable(),
  created_at: z.string().nullable(),
  id: z.string(),
  orders: jsonSchema.nullable(),
  personal: jsonSchema.nullable(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const userPreferencesInsertSchema = z.object({
  business: jsonSchema.optional().nullable(),
  contact_by_enum: contactMethodSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  orders: jsonSchema.optional().nullable(),
  personal: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const userPreferencesUpdateSchema = z.object({
  business: jsonSchema.optional().nullable(),
  contact_by_enum: contactMethodSchema.optional().nullable(),
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  orders: jsonSchema.optional().nullable(),
  personal: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const userPreferencesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_preferences_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userRolesRowSchema = z.object({
  created_at: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  role_id: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const userRolesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  role_id: z.string(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const userRolesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  role_id: z.string().optional(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const userRolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_roles_role_id_fkey"),
    columns: z.tuple([z.literal("role_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("roles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_roles_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("user_roles_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const usersRowSchema = z.object({
  created_at: z.string().nullable(),
  email: z.string(),
  id: z.string(),
  is_active: z.boolean().nullable(),
  last_login: z.string().nullable(),
  password_hash: z.string().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
});

export const usersInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  email: z.string(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  last_login: z.string().optional().nullable(),
  password_hash: z.string().optional().nullable(),
  tenant_id: z.string(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const usersUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  email: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional().nullable(),
  last_login: z.string().optional().nullable(),
  password_hash: z.string().optional().nullable(),
  tenant_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const usersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("users_tenant_id_fkey"),
    columns: z.tuple([z.literal("tenant_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("tenants"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const getCurrentProductSpecialsReturnsSchema = jsonSchema;

export const getCustomerByIdReturnsSchema = jsonSchema;

export const getDetailsForProductsInCustomerPrefReturnsSchema = jsonSchema;

export const getLastOrderReturnsSchema = jsonSchema;

export const getProductSpecialsByTenantReturnsSchema = jsonSchema;

export const getProposedOrderReturnsSchema = jsonSchema;

export const callOutcomeSchema = z.union([
  z.literal("success"),
  z.literal("failed"),
  z.literal("follow_up"),
  z.literal("rescheduled"),
  z.literal("no_answer"),
  z.literal("busy"),
  z.literal("callback_requested"),
  z.literal("handoff"),
  z.literal("timed_out"),
]);

export const callPurposeSchema = z.union([
  z.literal("sales"),
  z.literal("support"),
  z.literal("feedback"),
  z.literal("other"),
  z.literal("complaint"),
  z.literal("survey"),
  z.literal("appointment"),
  z.literal("billing"),
]);

export const callStatusSchema = z.union([
  z.literal("scheduled"),
  z.literal("completed"),
  z.literal("canceled"),
  z.literal("in_progress"),
  z.literal("missed"),
  z.literal("rescheduled"),
  z.literal("priority"),
]);

export const orderStatusSchema = z.union([
  z.literal("pending"),
  z.literal("processing"),
  z.literal("shipped"),
  z.literal("delivered"),
  z.literal("canceled"),
  z.literal("returned"),
  z.literal("refunded"),
  z.literal("user_confirmed"),
  z.literal("accepted"),
]);

export const callLogsRowSchema = z.object({
  agent_id: z.string().nullable(),
  call_date: z.string().nullable(),
  created_at: z.string().nullable(),
  customer_id: z.string().nullable(),
  duration: z.number().nullable(),
  follow_up_date: z.string().nullable(),
  id: z.string(),
  notes: z.string().nullable(),
  outcome: interactionOutcomeSchema.nullable(),
  purpose: interactionPurposeSchema.nullable(),
  reorder_id: z.string().nullable(),
  status: interactionStatusSchema.nullable(),
  tenant_id: z.string(),
  updated_at: z.string().nullable(),
});

export const customerPreferencesRowSchema = z.object({
  business: jsonSchema.nullable(),
  contact_by_enum: contactMethodSchema.nullable(),
  created_at: z.string().nullable(),
  customer_id: z.string(),
  favorites: jsonSchema.nullable(),
  id: z.string(),
  orders: jsonSchema.nullable(),
  personal: jsonSchema.nullable(),
  updated_at: z.string().nullable(),
});
